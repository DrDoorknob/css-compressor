/**
 * Author: Alexander Samilyak (aleksam241@gmail.com)
 * Created: 2012.02.19
 * Copyright 2012 Art. Lebedev Studio. All Rights Reserved.
 */

package ru.artlebedev.csscompressor;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.cli.CommandLine;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;


class JsonConfigBuilder extends ConfigBuilder {

  static final String REPLACE_SPLITTER = "::";

  final String configFilePath;

  JsonConfigBuilder(final CommandLine cmdLine) {
    configFilePath = cmdLine.getArgs()[0];
    makeReplaces(cmdLine);
  }

  /* (non-Javadoc)
	 * @see ru.artlebedev.csscompressor.ConfigBuilder#build()
	 */
	@Override
	protected Config build() throws Exception {
	    parseConfigFile();



	    return super.build();
	}


  void parseConfigFile() throws IOException {
    JsonElement root = new JsonParser().parse(Utils.readFile(configFilePath));

    if (!root.isJsonObject()) {
      throw new RuntimeException(String.format(
          "Config file %s contains not a JSON object as its root",
          configFilePath));
    }

    JsonObject jsonConfig = root.getAsJsonObject();

    // Keep track of the keys in the 'options' object so that we can warn
    // about unused options in the config file.
    Set<String> options = new HashSet<String>();
    for (Map.Entry<String, JsonElement> entry : jsonConfig.entrySet()) {
      options.add(entry.getKey());
    }

    for (ConfigOption configOption : ConfigOption.values()) {
      String optionName = configOption.getName();

      if (jsonConfig.has(optionName)) {
        configOption.update(jsonConfig.get(optionName), this);
        options.remove(optionName);
      }
    }

    for (String unusedOption : options) {
      System.err.printf(
          "WARNING: Unused option \"%s\" in %s\n",
          unusedOption,
          configFilePath);
    }
  }


  @Override
  protected String getRootFullPath() {
    String configCatalog = new File(configFilePath).getParent();

    String rootPath;
    if (this.rootPath != null) {
      rootPath = this.rootPath;
    } else {
      rootPath = ConfigOption.ROOT.getDefaultValue();
    }

    return new File(configCatalog, rootPath).getPath();
  }

  protected void makeReplaces(final CommandLine cmdLine) {
    String[] replaces = cmdLine.getOptionValues("replace");
    List<Config.Replace> processedReplaces = new ArrayList<Config.Replace>();

    if (replaces != null) {
      for (String replaceStr : replaces) {
        if (replaceStr.contains(REPLACE_SPLITTER)) {
          String[] split = replaceStr.split(REPLACE_SPLITTER, 2);
          processedReplaces.add(
              new Config.Replace(split[0], split[1]));

          if (!isQuiet()) {
            System.out.println("Replace: " + split[0] + " => " +  split[1]);
          }

        } else {
          throw new RuntimeException(
              String.format(
                  "Replace '%s' did not contain splitter '%s'",
                  replaceStr, REPLACE_SPLITTER));
        }
      }
    }

    this.replaces = processedReplaces;
  }

}
